////////////////////////////////////////////////////////////////////////////////
//
// Code::Blocks new project wizard script
//
// Project: Sming Wizard
// Author:  Brian Walton
// Derived from works by:  Brian Sidebotham & H. Metin OZER
//
////////////////////////////////////////////////////////////////////////////////

// Helper function to convert integer to boolean
function IntToBool(val)
{
    return (val == 0 ? false : true);
}

// Helper function to convert boolean to integer
function BoolToInt(val)
{
    return (val ? 1 : 0);
}

// Wizard global variables
bSpiffs <- IntToBool(GetConfigManager().Read(_T("/sming_project_wizard/Spiffs"), 0));
sSpiffsSize <- GetConfigManager().Read(_T("/sming_project_wizard/SpiffsSize"), _T("128K"));
bRboot <- IntToBool(GetConfigManager().Read(_T("/sming_project_wizard/Rboot"), 0));
bRbootBigFlash <- IntToBool(GetConfigManager().Read(_T("/sming_project_wizard/RbootBigFlash"), 1));
bRbootTwoRoms <- IntToBool(GetConfigManager().Read(_T("/sming_project_wizard/RbootTwoRoms"), 0));
bRbootRtc <- IntToBool(GetConfigManager().Read(_T("/sming_project_wizard/RbootRtc"), 0));
bRbootGpio <- IntToBool(GetConfigManager().Read(_T("/sming_project_wizard/RbootGpio"), 0));
sComPort <- GetConfigManager().Read(_T("/sming_project_wizard/ComPort"), _T("/dev/ttyUSB0"));
sBaud <- GetConfigManager().Read(_T("/sming_project_wizard/Baud"), _T("115200"));
sUploadBaud <- GetConfigManager().Read(_T("/sming_project_wizard/UploadBaud"), sBaud);
nSpiSize <- GetConfigManager().Read(_T("/sming_project_wizard/SpiSize"), 1);
nSpiMode <- GetConfigManager().Read(_T("/sming_project_wizard/SpiMode"), 0);
nSpiClock <- GetConfigManager().Read(_T("/sming_project_wizard/SpiClock"), 2);
bCustomPath <- IntToBool(GetConfigManager().Read(_T("/sming_project_wizard/CustomPath"), 0));
sEspHome <- GetConfigManager().Read(_T("/sming_project_wizard/EspHome"), _T("~/Sming/esp-toolkit/sdk"));
sSmingHome <- GetConfigManager().Read(_T("/sming_project_wizard/SmingHome"), _T("~/Sming/Sming"));

function BeginWizard()
{
    local wiz_type = Wizard.GetWizardType();

    if(wiz_type == wizProject)
    {
        local intro_msg = _T("Welcome to the SMING project wizard!\n" +
                             "This wizard will guide you through creating a new SMING project for the ESP8266.\n\n" +
                             "When you 're ready to proceed, please click \"Next\"...");

        Wizard.AddInfoPage(_T("SMINGIntro"), intro_msg);
        Wizard.AddProjectPathPage();
		Wizard.AddPage(_T("SmingOptions"));
    }
    else
        print(wiz_type);
}


// Populate Options page with default values
function OnEnter_SmingOptions(fwd)
{
	if(fwd)
	{
		sFullPath <- Wizard.GetProjectFullFilename();
		//Come from project path page so validate path
		if(sFullPath.Matches(_T("* *")))
		{
			Message(_T("There are spaces in the path or filename.\n\n" +
					   "This is known to break rBoot projects.\n\n" +
					   "It is advised to correct this before creating the project."), _T("Alert"), wxICON_WARNING);
			
		}
	}
	Wizard.CheckCheckbox(_T("chkSpiffs"), bSpiffs);
	Wizard.SetTextControlValue(_T("txtSpiffsSize"), sSpiffsSize);
	Wizard.CheckCheckbox(_T("chkRboot"), bRboot);
	Wizard.CheckCheckbox(_T("chkRbootBigFlash"), bRbootBigFlash);
	Wizard.CheckCheckbox(_T("chkRbootTwoRoms"), bRbootTwoRoms);
	Wizard.CheckCheckbox(_T("chkRbootRtc"), bRbootRtc);
	Wizard.CheckCheckbox(_T("chkRbootGpio"), bRbootGpio);
	Wizard.SetTextControlValue(_T("txtComPort"), sComPort);
	Wizard.SetTextControlValue(_T("txtBaud"), sBaud);
	Wizard.SetTextControlValue(_T("txtUploadBaud"), sUploadBaud);
	Wizard.SetComboboxSelection(_T("cmbSpiSize"), nSpiSize);
	Wizard.SetComboboxSelection(_T("cmbSpiMode"), nSpiMode);
	Wizard.SetComboboxSelection(_T("cmbSpiClock"), nSpiClock);
	Wizard.CheckCheckbox(_T("chkCustomPath"), bCustomPath);
	Wizard.SetTextControlValue(_T("txtEspHome"), sEspHome);
	Wizard.SetTextControlValue(_T("txtSmingHome"), sSmingHome);
	
	OnClick_chkSpiffs()
	OnClick_chkRboot()
	OnClick_chkCustomPath()
	
    return true;
}

function OnClick_chkSpiffs()
{
    bSpiffs = Wizard.IsCheckboxChecked(_T("chkSpiffs"));
	Wizard.EnableWindow(_T("txtSpiffsSize"), bSpiffs);
}

function OnClick_chkRboot()
{
    bRboot = Wizard.IsCheckboxChecked(_T("chkRboot"));
	Wizard.EnableWindow(_T("chkRbootBigFlash"), bRboot);
	Wizard.EnableWindow(_T("chkRbootTwoRoms"), bRboot);
	Wizard.EnableWindow(_T("chkRbootRtc"), bRboot);
	Wizard.EnableWindow(_T("chkRbootGpio"), bRboot);
}

function OnClick_chkCustomPath()
{
    bCustomPath = Wizard.IsCheckboxChecked(_T("chkCustomPath"));
	Wizard.EnableWindow(_T("txtEspHome"), bCustomPath);
	Wizard.EnableWindow(_T("txtSmingHome"), bCustomPath);
}

function OnClick_btnReset()
{
	Wizard.CheckCheckbox(_T("chkSpiffs"), false);
	Wizard.SetTextControlValue(_T("txtSpiffsSize"), _T("128K"));
	Wizard.CheckCheckbox(_T("chkRboot"), false);
	Wizard.CheckCheckbox(_T("chkRbootBigFlash"), true);
	Wizard.CheckCheckbox(_T("chkRbootTwoRoms"), false);
	Wizard.CheckCheckbox(_T("chkRbootRtc"), false);
	Wizard.CheckCheckbox(_T("chkRbootGpio"), false);
	Wizard.SetTextControlValue(_T("txtComPort"), _T("/dev/ttyUSB0"));
	Wizard.SetTextControlValue(_T("txtBaud"), _T("115200"));
	Wizard.SetTextControlValue(_T("txtUploadBaud"), _T("115200"));
	Wizard.SetComboboxSelection(_T("cmbSpiSize"), 1);
	Wizard.SetComboboxSelection(_T("cmbSpiMode"), 0);
	Wizard.SetComboboxSelection(_T("cmbSpiClock"), 2);
        Wizard.CheckCheckbox(_T("chkCustomPath"), false);
        Wizard.SetTextControlValue(_T("txtEspHome"), _T("~/Sming/esp-toolkit/sdk"));
	Wizard.SetTextControlValue(_T("txtSmingHome"), _T("~/Sming/Sming"));
	OnClick_chkRboot();
	OnClick_chkSpiffs();
	OnClick_chkCustomPath();
}

// Update global variables with options
function OnLeave_SmingOptions(fwd)
{
	bSpiffs = Wizard.IsCheckboxChecked(_T("chkSpiffs"));
	sSpiffsSize = Wizard.GetTextControlValue(_T("txtSpiffsSize"));
	bRboot = Wizard.IsCheckboxChecked(_T("chkRboot"));
	bRbootBigFlash = Wizard.IsCheckboxChecked(_T("chkRbootBigFlash"));
	bRbootTwoRoms = Wizard.IsCheckboxChecked(_T("chkRbootTwoRoms"));
	bRbootRtc = Wizard.IsCheckboxChecked(_T("chkRbootRtc"));
	bRbootGpio = Wizard.IsCheckboxChecked(_T("chkRbootGpio"));
	sComPort = Wizard.GetTextControlValue(_T("txtComPort"));
	sBaud = Wizard.GetTextControlValue(_T("txtBaud"));
	sUploadBaud = Wizard.GetTextControlValue(_T("txtUploadBaud"));
	nSpiSize = Wizard.GetComboboxSelection(_T("cmbSpiSize"));
	nSpiMode = Wizard.GetComboboxSelection(_T("cmbSpiMode"));
	nSpiClock = Wizard.GetComboboxSelection(_T("cmbSpiClock"));
        bCustomPath = Wizard.IsCheckboxChecked(_T("chkCustomPath"));
        sEspHome = Wizard.GetTextControlValue(_T("txtEspHome"));
        sSmingHome = Wizard.GetTextControlValue(_T("txtSmingHome"));
	return true;
}

// -----------------------------------------------------------------------------
// Return a string of the form "filename;contents"
// Return an empty string to denote that no more files are to be generated
function GetGeneratedFile(file_index)
{
	local filename = GetTemplateFile(file_index);
    if (filename != _T(""))
    {
        local path = Wizard.FindTemplateFile(_T("sming/files/" + filename));
		local filecontent = IO.ReadFileContents(path);
		if(filename.Matches(_T("Makefile")))
		{
			if(bSpiffs)
			{
				lSpiffsSize <- 0;
				if(sSpiffsSize.Right(1).Upper().Matches(_T("K")))
					lSpiffsSize = wxString_ToLong(sSpiffsSize.Mid(0, sSpiffsSize.Length() - 1)) * 1024;
				else if(sSpiffsSize.Right(1).Upper().Matches(_T("M")))
					lSpiffsSize = wxString_ToLong(sSpiffsSize.Mid(0, sSpiffsSize.Length() - 1)) * 1024 * 1024;
				else
					lSpiffsSize = wxString_ToLong(sSpiffsSize);
				filecontent.Replace(_T("DISABLE_SPIFFS = 1"), _T("DISABLE_SPIFFS = 0\n" +
					"SPIFF_SIZE = " + lSpiffsSize));
			}
			if(bRboot)
			{
				filecontent.Replace(_T("RBOOT_ENABLED = 0"), _T("RBOOT_ENABLED = 1\n" +
					"RBOOT_BIG_FLASH = " + BoolToInt(bRbootBigFlash) +
					"\nRBOOT_TWO_ROMS = " + BoolToInt(bRbootTwoRoms) +
					"\nRBOOT_RTC_ENABLED = " + BoolToInt(bRbootRtc) +
					"\nRBOOT_GPIO_ENABLED = " + BoolToInt(bRbootGpio)));
			}
			filecontent.Replace(_T("COM_PORT ?= /dev/ttyS4"), _T("COM_PORT ?= ") + sComPort );
			filecontent.Replace(_T("COM_SPEED ?= 115200"), _T("COM_SPEED ?= ") + sBaud );
			filecontent.Replace(_T("COM_SPEED_ESPTOOL  ?= 115200"), _T("COM_SPEED_ESPTOOL  ?= ") + sUploadBaud );
                        if(nSpiSize==0)
                        {
                                filecontent.Replace(_T("SPI_SIZE ?= 4M"), _T("SPI_SIZE ?= 256k"));
                        } else if(nSpiSize==1)
                        {
                                filecontent.Replace(_T("SPI_SIZE ?= 4M"), _T("SPI_SIZE ?= 512k"));
                        } else if(nSpiSize==2)
                        {
                                filecontent.Replace(_T("SPI_SIZE ?= 4M"), _T("SPI_SIZE ?= 1M"));
                        } else if(nSpiSize==3)
                        {
                                filecontent.Replace(_T("SPI_SIZE ?= 4M"), _T("SPI_SIZE ?= 2M"));
                        }
                        if(nSpiClock==0)
                        {
                                filecontent.Replace(_T("SPI_SPEED ?= 40"), _T("SPI_SPEED ?= 20"));
                        } else if(nSpiClock==1)
                        {
                                filecontent.Replace(_T("SPI_SPEED ?= 40"), _T("SPI_SPEED ?= 26"));
                        } else if(nSpiClock==3)
                        {
                                filecontent.Replace(_T("SPI_SPEED ?= 40"), _T("SPI_SPEED ?= 80"));
                        }
                        if(nSpiMode==1)
                        {
                                filecontent.Replace(_T("SPI_MODE ?= qio"), _T("SPI_MODE ?= qout"));
                        } else if(nSpiClock==2)
                        {
                                filecontent.Replace(_T("SPI_MODE ?= qio"), _T("SPI_MODE ?= dio"));
                        } else if(nSpiClock==3)
                        {
                                filecontent.Replace(_T("SPI_MODE ?= qio"), _T("SPI_MODE ?= dout"));
                        }
			if(bCustomPath)
			{
                                filecontent.Replace(_T("ESP_HOME ?= ~/Sming/esp-toolkit/sdk"), _T("ESP_HOME ?= ") + sEspHome);
                                filecontent.Replace(_T("SMING_HOME ?= ~/Sming/Sming"), _T("SMING_HOME ?= ") + sSmingHome);
                        }
		}
        return filename + _T(";") + filecontent;
    }
	else
		return _T("");
}

// -----------------------------------------------------------------------------
// Return template filename based on an index
function GetTemplateFile(index)
{
    if(index == 0)
	{
        return _T("Makefile");
    }
	else
    if (index == 1)
    {
		return _T("src/application.cpp");
    }
	else
    if (index == 2)
    {
		return _T("include/application.h");
    }
	else
    if (index == 3)
    {
		return _T("include/user_config.h");
    }
	else
    if (index == 4)
    {
		return _T("spiffs/README.txt");
    }

    return _T("");
}

// Setup the the project
function SetupProject(project)
{
    // Set compiler - we only use make from this compiler configuration
	if (PLATFORM == PLATFORM_MSW)
		project.SetCompilerID(_T("cygwin")); //cygwin make provides POSIX envirnment in Windows
	else
		project.SetCompilerID(_T("gcc"));

    // We use custom Makefile
    project.SetMakefileCustom(true);

    // Remove default targets
    project.RemoveBuildTarget(_T("Debug"));
    project.RemoveBuildTarget(_T("Release"));

    // Add targets and fix clean rule
	project.SetMakeCommandFor(mcClean, _T("$make -f $makefile clean"));
    local buildTarget = project.AddBuildTarget(_T("build"));
	buildTarget.SetMakeCommandFor(mcClean, _T("$make -f $makefile clean"));
    buildTarget = project.AddBuildTarget(_T("flash"));
	buildTarget.SetMakeCommandFor(mcClean, _T("$make -f $makefile clean"));
    buildTarget = project.AddBuildTarget(_T("flashinit"));
	buildTarget.SetMakeCommandFor(mcClean, _T("$make -f $makefile clean"));
    buildTarget = project.AddBuildTarget(_T("spiff_update"));
	buildTarget.SetMakeCommandFor(mcClean, _T("$make -f $makefile clean"));
	
	// Add code completion paths (not working!!!)
	project.AddToExtensions(_T("code_completion/+search_path:add=$(#SMING)/"));
	/* TODO Add following paths to code_completion/+search_path
	$(#SMING)/ (required for SmingCore/SmingCore.h which provides most Sming includes)
	$(#SMING/third-party)/rboot (required for rboot-api)
	$(#SMING/third-party)/rboot/appcode (required for rboot-api)
	$(#SMING/third-party)/spiffs/src (spiffs.h provides constants)
	$(#SMING)/include (not required)
	$(#SMING)/system/esp-lwip/lwip/include (does not exist - may need lwip and lwip/app)
	$(#SMING)/third-party/esp-open-lwip/include (not sure this helps much)
	$(#SMING)/third-party/lwip2/glue-esp/include-esp
	$(#SMING)/third-party/lwip2/include
	$(#SMING)/system/include (Not required? Seems to implement functions pointed to by other available functions, e.g. printf_P)
	$(#SMING)/Wiring (not required - picked up by SmingCore.h)
	$(#SMING)/Libraries (not required - picked up by SmingCore.h)
	$(#SMING)/Libraries/Adafruit_GFX (not required - picked up by SmingCore.h)
	$(#SMING)/SmingCore (not required - picked up by SmingCore.h)
	$(#SMING)/Services/SpifFS (don't think we need this)
	$(SDK_BASE)/../include (doesn't exist)
	$(#SMING/third-party)/gdbstub (does not exist - there is a gdb directory but this does not parse anyway)
	$(#SMING/third-party)/axtls-8266 (nothing in this directory - prob not required)
	$(#SMING/third-party)/axtls-8266/ssl (do we need this?)
	$(#SMING/third-party)/axtls-8266/crypto (do we need this?)

	*/

	// Persist user selected option values
	ConfigManager.Write(_T("/sming_project_wizard/Spiffs"), BoolToInt(bSpiffs));
	if(bSpiffs)
	{
		GetConfigManager().Write(_T("/sming_project_wizard/SpiffsSize"), sSpiffsSize);
	}
	ConfigManager.Write(_T("/sming_project_wizard/Rboot"), BoolToInt(bRboot));
	if(bRboot)
	{
		GetConfigManager().Write(_T("/sming_project_wizard/RbootBigFlash"), BoolToInt(bRbootBigFlash));
		GetConfigManager().Write(_T("/sming_project_wizard/RbootTwoRoms"), BoolToInt(bRbootTwoRoms));
		GetConfigManager().Write(_T("/sming_project_wizard/RbootRtc"), BoolToInt(bRbootRtc));
		GetConfigManager().Write(_T("/sming_project_wizard/RbootGpio"), BoolToInt(bRbootGpio));
	}
        GetConfigManager().Write(_T("/sming_project_wizard/ComPort"), sComPort);
        GetConfigManager().Write(_T("/sming_project_wizard/Baud"), sBaud);
        GetConfigManager().Write(_T("/sming_project_wizard/UploadBaud"), sUploadBaud);
        GetConfigManager().Write(_T("/sming_project_wizard/SpiSize"), nSpiSize);
        GetConfigManager().Write(_T("/sming_project_wizard/SpiMode"), nSpiMode);
        GetConfigManager().Write(_T("/sming_project_wizard/SpiClock"), nSpiClock);
        if(bCustomPath)
	{
                GetConfigManager().Write(_T("/sming_project_wizard/EspHome"), sEspHome);
                GetConfigManager().Write(_T("/sming_project_wizard/SmingHome"), sSmingHome);
        }

    return true;
}

